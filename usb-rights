#!/usr/bin/env python3

import os, operator
from stat import *
from subprocess import Popen, PIPE
from collections import OrderedDict

buses = []

def lsusb(dev):
  return bash(["lsusb", "-D", dev])

def bash(command):
  (stdout, stderr) = Popen(command, stdout=PIPE).communicate()
  return (stdout.decode().strip())

def find_value_in_lsusb(usbinfo, key):
  value = ""
  for line in usbinfo.split("\n"):
    if key in line:
      value = line.replace(key, "").strip()
      try:
        value = value.split(" ", 1)[1].strip()
      except:
        value = ""
  return value

class Bus():
	def __init__(self, num):
	  self.num = num
	  self.devices = []

class Device():
  def __init__(self, bus, num):
    self.info = OrderedDict()
    self.num = num
    self.path = '/dev/bus/usb/%s/%s' % (d, f)
        
    info_keys = ["idProduct", "idVendor", "iManufacturer", "iProduct"]
    for key in info_keys:
      self.store_info(key)

  def store_info(self, key):
    self.info[key] = find_value_in_lsusb(lsusb(self.path), key)

  def get_rights(self):
    stat = os.stat(self.path)
    return (oct(stat[ST_MODE])[-3:])

for x0, dirnames, x1 in os.walk('/dev/bus/usb'):
  for d in dirnames:
    bus = Bus(d)
    buses.append(bus)
    for x2, x3, filenames in os.walk('/dev/bus/usb/%s' % d):
      for f in filenames:
        bus.devices.append(Device(d, f))
    bus.devices.sort(key=operator.attrgetter('num'))

buses.sort(key=operator.attrgetter('num'))

for bus in buses:
  print("Bus %s" % bus.num)
  for dev in bus.devices:
    print ("\tDev %s (%s) %s" % (dev.num, dev.get_rights(), dev.path))
    for k, v in dev.info.items():
      if v:
        print("\t\t%s %s" % (k.ljust(len("iManufacturer")), v))
